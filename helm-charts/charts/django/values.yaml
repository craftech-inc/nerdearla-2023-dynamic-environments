global:
  # enabled is the master enabled switch. Setting this to true or false
  # will enable or disable all the components within this chart by default.
  enabled: true
  # Used to define custom django.fullname in template.
  projectName: "django"
  # image sets the repo,tag and pullPolicy of the project
  image:
    repository: ""
    tag: latest
    pullPolicy: Always

    
  # Name of the cluster deployed to. Used for external secrets definition
  clusterName: "django"
  # Namespace where release will be deployed
  namespace: "django"

  # AccountID where the infrastructure will be deployed if 
  accountId: "033545611835"

  # True if external secrets should be used
  externalSecrets:
    enabled: true

api:
  # True if you want to enable api deployment.
  enabled: true

  # Defines the path where gunicorn serves the application
  commandPath: config.wsgi:application
  
  # set this to the name of the secret created when externalSecrets is disabled
  varsSecretName: ""

  replicaCount: 1
  
  resources: {}
  # resources:
  #   requests:
  #     memory: 256Mi
  #     cpu: 250m
  #   limits:
  #     memory: 256Mi
  #     cpu: 250m
  # Used to define custom readinessProbe settings
  readinessProbe:
    enabled: true
    # If you need to use a http path instead of the default exec
    # path: /v1/sys/health?standbyok=true
  # Used to enable a livenessProbe for the pods
  livenessProbe:
    enabled: false
    path: "/v1/sys/health?standbyok=true"
    initialDelaySeconds: 60
  # extraEnvironmentVars is a list of extra enviroment variables to set with the stateful set. These could be
  # used to include variables required for auto-unseal.
  extraEnvironmentVars: {}
    # GOOGLE_REGION: global
    # GOOGLE_PROJECT: myproject

  # extraSecretEnvironmentVars is a list of extra enviroment variables to set with the stateful set.
  # These variables take value from existing Secret objects.
  extraSecretEnvironmentVars: []
    # - envName: AWS_SECRET_ACCESS_KEY
    #   secretName: project
    #   secretKey: AWS_SECRET_ACCESS_KEY
  
  # Affinity Settings for api pods
  # This should be a multi-line string matching the affinity section of a
  # PodSpec.
  affinity: null

  # Toleration Settings for api pods
  # This should be a multi-line string matching the Toleration array
  # in a PodSpec.
  tolerations: null

  # nodeSelector labels for server pod assignment, formatted as a muli-line string.
  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  # Example:
  # nodeSelector: |
  #   environment: qa
  nodeSelector: {}

  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 50
    targetMemoryUtilizationPercentage: 50
  
  terminationGracePeriodSeconds: 300
    
  ingress:
    enabled: false
    ingressClassName: alb-ingress
    labels: {}
    # traffic: external
    annotations:
    # annotations:
    #   alb.ingress.kubernetes.io/target-type: ip
    #   alb.ingress.kubernetes.io/group.name: debit-dev
    #   alb.ingress.kubernetes.io/ssl-policy: 'ELBSecurityPolicy-FS-1-2-2019-08'
    #   alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
    #   alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
  
    hosts:
      - paths:
          - path: /
            pathType: Prefix

  # Enables a headless service to be used by
  service:
    enabled: true
    # clusterIP controls whether a Cluster IP address is attached to the
    # API service within Kubernetes.  By default the API service will
    # be given a Cluster IP address, set to None to disable.  When disabled
    # Kubernetes will create a "headless" service.  Headless services can be
    # used to communicate with pods directly through DNS instead of a round robin
    # load balancer.
    # clusterIP: None

    # Configures the service type for the main API service.  Can be ClusterIP
    # or NodePort.
    type: ClusterIP

    # Port on which API server is listening
    port: 8000
    # Target port to which the service should be mapped to
    targetPort: 8200
    # Extra annotations for the service definition. This should be a multi-line
    # string formatted as a map of the annotations to apply to the service.
    annotations: {}
    
    healthcheck:
      enabled: false
      livenessProbe:
        enabled: true
        path: /health/ready
      readinessProbe:
        enabled: true
        path:
