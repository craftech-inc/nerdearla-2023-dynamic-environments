global:
  # enabled is the master enabled switch. Setting this to true or false
  # will enable or disable all the components within this chart by default.
  enabled: true
  # Used to define custom django.fullname in template.
  projectName: "backend"
  # image sets the repo,tag and pullPolicy of the project
  image:
    repository: aixa1704/desarrollo-seguro-backend
    tag: latest
    pullPolicy: Always
    
  # Name of the cluster deployed to. Used for external secrets definition
  clusterName: "kind"
  # Namespace where release will be deployed
  namespace: "backend"

  # True if external secrets should be used
  externalSecrets:
    enabled: false

django:
  api:
    # True if you want to enable api deployment.
    enabled: true

    # Defines the path where gunicorn serves the application
    command: [ "python manage.py flush --no-input", "&&" ,"python manage.py migrate",  "&&",  "python manage.py runserver 0.0.0.0:8000"]

    replicaCount: 1
    
    resources: {}
    # resources:
    #   requests:
    #     memory: 256Mi
    #     cpu: 250m
    #   limits:
    #     memory: 256Mi
    #     cpu: 250m
    # Used to define custom readinessProbe settings
    readinessProbe:
      enabled: true
      # If you need to use a http path instead of the default exec
      # path: /v1/sys/health?standbyok=true
    # Used to enable a livenessProbe for the pods
    livenessProbe:
      enabled: false
      path: "/v1/sys/health?standbyok=true"
      initialDelaySeconds: 60

    
    # set this to the name of the secret created when externalSecrets is disabled
    varsSecretName: ""
    # extraEnvironmentVars is a list of extra enviroment variables to set with the stateful set. These could be
    # used to include variables required for auto-unseal.
    extraEnvironmentVars: 
      DEBUG: "1"
      RUNSERVER_PORT: "8000"
      SQL_ADDRESS: "app-backend-postgresql.app-backend.svc.cluster.local"
      SQL_ENGINE: "django.db.backends.postgresql"
      SQL_PORT: "5432"
      SQL_USER: "apiuser"
      SQL_PASSWORD: "qwerty1234"
      SQL_DATABASE: "apidb"  

    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 3
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
    
    terminationGracePeriodSeconds: 300
      
    ingress:
      enabled: true
      ingressClassName: ""
      labels: {}
      # traffic: external
      annotations:
      # annotations:
      #   alb.ingress.kubernetes.io/target-type: ip
      #   alb.ingress.kubernetes.io/group.name: debit-dev
      #   alb.ingress.kubernetes.io/ssl-policy: 'ELBSecurityPolicy-FS-1-2-2019-08'
      #   alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
      #   alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
    
      hosts:
        - paths:
            - path: /
              pathType: Prefix
              servicePort: 8000 

    # Enables a headless service to be used by
    service:
      enabled: true
      # clusterIP controls whether a Cluster IP address is attached to the
      # API service within Kubernetes.  By default the API service will
      # be given a Cluster IP address, set to None to disable.  When disabled
      # Kubernetes will create a "headless" service.  Headless services can be
      # used to communicate with pods directly through DNS instead of a round robin
      # load balancer.
      # clusterIP: None

      # Configures the service type for the main API service.  Can be ClusterIP
      # or NodePort.
      type: ClusterIP

      # Port on which API server is listening
      port: 8000
      # Target port to which the service should be mapped to
      targetPort: 8000
      # Extra annotations for the service definition. This should be a multi-line
      # string formatted as a map of the annotations to apply to the service.
      annotations: {}
      
      healthcheck:
        enabled: false
        livenessProbe:
          enabled: true
          path: /health/ready
        readinessProbe:
          enabled: true
          path:

postgresql:
  image:
    repository: postgres
    tag: "11.5"
    pullPolicy: IfNotPresent

  service:
    type: ClusterIP
    annotations: {}

  ## Postgresql values
  postgresql:
    username: apiuser
    password: qwerty1234
    database: apidb
    port: 5432
    # initdbArgs 
    # initdbWalDir
    dataDir: /var/lib/postgresql/data/pgdata


  volumePermissions:
    enabled: true
    image:
      registry: docker.io
      repository: debian
      tag: buster-slim
      pullPolicy: Always
    securityContext:
      runAsUser: 0

  ## Pod Security Context
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
  ##
  securityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001

  persistence:
    enabled: true
    mountPath: /var/lib/postgresql
    subPath: ""
    accessModes:  [ReadWriteOnce]
    ## Storage Capacity for persistent volume
    size: 10Gi
    annotations: {}

infra:
  s3:
    enabled: false
    name: files-craftech-neardearla